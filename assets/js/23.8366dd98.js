(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{528:function(t,e,_){"use strict";_.r(e);var s=_(62),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("ul",[_("li",[_("p",[t._v("原型("),_("code",[t._v("prototype")]),t._v("): 一个简单的对象，用于实现对象的 属性继承。可以简单的理解成对象的爹。在 "),_("code",[t._v("Firefox")]),t._v(" 和 "),_("code",[t._v("Chrome")]),t._v(" 中，每个"),_("code",[t._v("JavaScript")]),t._v("对象中都包含一个"),_("code",[t._v("__proto__")]),t._v("(非标准)的属性指向它爹(该对象的原型)，可"),_("code",[t._v("obj.__proto__")]),t._v("进行访问。")])]),t._v(" "),_("li",[_("p",[t._v("构造函数: 可以通过"),_("code",[t._v("new")]),t._v("来 新建一个对象 的函数。")])]),t._v(" "),_("li",[_("p",[t._v("实例: 通过构造函数和"),_("code",[t._v("new")]),t._v("创建出来的对象，便是实例。 实例通过"),_("code",[t._v("__proto__")]),t._v("指向原型，通过"),_("code",[t._v("constructor")]),t._v("指向构造函数。")]),t._v(" "),_("p",[t._v("以"),_("code",[t._v("Object")]),t._v("为例，我们常用的"),_("code",[t._v("Object")]),t._v("便是一个构造函数，因此我们可以通过它构建实例。")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("p",[t._v("此时， 实例为"),_("code",[t._v("instance")]),t._v(", 构造函数为"),_("code",[t._v("Object")]),t._v("，我们知道，构造函数拥有一个"),_("code",[t._v("prototype")]),t._v("的属性指向原型，因此原型为:")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prototype "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n")])])]),_("p",[_("strong",[t._v("这里我们可以来看出三者的关系:")])]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("实例.__proto__ === 原型")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("原型.constructor === 构造函数")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("构造函数.prototype === 原型")])])])])])]),t._v(" "),_("h3",{attrs:{id:"原型对象和构造函数的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原型对象和构造函数的关系"}},[t._v("#")]),t._v(" 原型对象和构造函数的关系")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("在JavaScript中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个"),_("code",[t._v("prototype")]),t._v("属性，这个属性指向函数的原型对象。")])]),t._v(" "),_("li",[_("p",[t._v("当函数经过"),_("code",[t._v("new")]),t._v("调用时，这个函数就成为了构造函数，返回一个全新的实例对象，这个实例对象有一个"),_("code",[t._v("__proto__")]),t._v("属性，指向构造函数的原型对象。")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://img-repo.poetries.top/images/20210309102015.png",alt:"img"}})])])])])}),[],!1,null,null,null);e.default=o.exports}}]);