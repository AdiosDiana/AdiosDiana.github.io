(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{530:function(e,t,v){"use strict";v.r(t);var _=v(62),o=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h4",{attrs:{id:"vue-响应式原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-响应式原理"}},[e._v("#")]),e._v(" "),v("strong",[e._v("Vue 响应式原理")])]),e._v(" "),v("p",[e._v("Vue 采用数据劫持结合发布—订阅模式的方法，通过 Object.defineProperty() 来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),e._v(" "),v("p",[v("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/20190922/vue.jpeg",alt:"img"}})]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Observer")]),e._v(" 遍历数据对象，给所有属性加上 "),v("code",[e._v("setter")]),e._v(" 和 "),v("code",[e._v("getter")]),e._v("，监听数据的变化")]),e._v(" "),v("li",[v("code",[e._v("compile")]),e._v(" 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")])]),e._v(" "),v("blockquote",[v("p",[v("code",[e._v("Watcher")]),e._v(" 订阅者是 "),v("code",[e._v("Observer")]),e._v(" 和 "),v("code",[e._v("Compile")]),e._v(" 之间通信的桥梁，主要做的事情")])]),e._v(" "),v("ul",[v("li",[e._v("在自身实例化时往属性订阅器 ("),v("code",[e._v("dep")]),e._v(") 里面添加自己")]),e._v(" "),v("li",[e._v("待属性变动 "),v("code",[e._v("dep.notice()")]),e._v(" 通知时，调用自身的 "),v("code",[e._v("update()")]),e._v(" 方法，并触发 "),v("code",[e._v("Compile")]),e._v(" 中绑定的回调")])])])}),[],!1,null,null,null);t.default=o.exports}}]);